#!/bin/sh
set -e

# create-xen-bootstrap-iso-fedora

# Script to create a Fedora Live Bootstrap iso with livemedia-creator.

# This builds the live media in a mock chroot.  It will install mock, if needed.
# All other packages (lorax-lmc-novirt, vim-minimal, pykickstart, and
# spin-kickstarts) are installed in the mock environment, i.e. it does not
# pollute the workstation.

# See: https://fedoraproject.org/wiki/Livemedia-creator-_How_to_create_and_use_a_Live_CD
#   for information on how to setup livemedia-creator with mock and lorax.

# Releases:
# 26 2017-07-11 4.11 2018-05-29
# 27 2017-11-14 4.13
# 28 2018-05-01 4.16
# 29 2018-10-23 4.??

# Releases 28/29 build on 28.

RELEASE="29"

if [ -n "$(uname -a | grep ec2.internal || :)" ]; then
  echo "Running in aws."
  sudo dnf -y upgrade
  if [ -b /dev/nvme0n1 ]; then
    echo "We have an nvme device."
    if [ -z "$(sudo blkid -p /dev/nvme0n1 || :)" ]; then
      if [ ! -x /usr/sbin/mkfs.btrfs ]; then
        echo "Installing btrfs tools."
        sudo dnf -y install btrfs-progs
      fi
      echo "Creating btrfs file system on nvme."
      sudo mkfs.btrfs /dev/nvme0n1
      echo "Creating btrfs sub-volumes."
      sudo mount /dev/nvme0n1 /mnt
      sudo btrfs sub create /mnt/lib
      sudo btrfs sub create /mnt/tmp
      echo "Copying files."
      sudo cp -a /var/lib /mnt
      sudo cp -a /var/tmp /mnt
      sudo umount /mnt
    fi
    if [ -z "$(mount | grep /var/lib || :)" ]; then
      echo "Mounting nvme volumes."
      sudo mount -o subvol=lib /dev/nvme0n1 /var/lib
      sudo mount -o subvol=tmp /dev/nvme0n1 /var/tmp
    fi
  fi
fi

if [ -z "$(command -v mock 2> /dev/null)" ]; then
  echo "Installing mock."
  sudo dnf -y install mock
  UNAME="lochnerr"
  [ -n "$(uname -a | grep ec2.internal || :)" ] && UNAME="fedora"
  echo "Adding user $UNAME to mock group."
  sudo usermod -a -G mock $UNAME
  echo "You must logout and login for group membership to take effect."
  [ -n "$(uname -a | grep ec2.internal || :)" ] && echo "Reboot now."
  exit 0
fi

if [ ! -e $HOME/.config/mock.cfg ]; then
  echo "Creating default mock config."
  mkdir -p $HOME/.config
  cat >$HOME/.config/mock.cfg <<-__EOF__
	config_opts['rpmbuild_networking'] = True
	config_opts['hostname'] = 'LiveXen'
	#config_opts['package_manager'] = 'dnf'
	#config_opts['http_proxy']  = 'http://192.168.33.88:3128'
	__EOF__
fi

if [ ! -d /var/lib/mock/fedora-${RELEASE}-x86_64 ]; then
  echo "Creating mock environment /var/lib/mock/fedora-${RELEASE}-x86_64."
  mock -r fedora-${RELEASE}-x86_64 --init
  mock -r fedora-${RELEASE}-x86_64 --install lorax-lmc-novirt vim-minimal pykickstart spin-kickstarts
fi

if [ ! -d /var/lib/mock/fedora-${RELEASE}-x86_64/root/home/build ]; then
  echo "Setting up build directory /home/build in mock environement."
  mock -r fedora-${RELEASE}-x86_64 --shell --old-chroot <<-EOD
	mkdir -p /home/build
	chown 1000:1000 /home/build
	EOD
fi

if [ ! -d /var/lib/mock/fedora-${RELEASE}-x86_64/root/usr/share/lorax/templates.d/99-generic ]; then
  echo "Error: Lorax templates not installed in mock environement."
  exit 1
fi

update_lorax_files() {

  mock -r fedora-${RELEASE}-x86_64 --shell --old-chroot <<-EOD
	# Remove the build lorax templates.
	rm -rf /home/build/share
	# Copy the baseline lorax templates.
	mkdir -p /home/build/share
	cp -a /usr/share/lorax /home/build/share
	chown -R 1000:1000 /home/build/share
	EOD

# Create the modified templates.
cat >/var/lib/mock/fedora-${RELEASE}-x86_64/root/home/build/share/lorax/templates.d/99-generic/live/x86.tmpl <<'__EOF__'
<%page args="kernels, runtime_img, basearch, inroot, outroot, product, isolabel"/>
<%
configdir="tmp/config_files/x86"
SYSLINUXDIR="usr/share/syslinux"
PXEBOOTDIR="images/pxeboot"
BOOTDIR="isolinux"
KERNELDIR=PXEBOOTDIR
LIVEDIR="LiveOS"
LORAXDIR="usr/share/lorax/"

## Don't allow spaces or escape characters in the iso label
def valid_label(ch):
    return ch.isalnum() or ch == '_'

isolabel = ''.join(ch if valid_label(ch) else '-' for ch in isolabel)

from os.path import basename
%>

## Test ${runtime_img} to see if udf is needed
<%
    import os
    from pylorax.sysutils import joinpaths
    if os.stat(joinpaths(inroot, runtime_img)).st_size >= 4*1024**3:
        udfargs = "-allow-limited-size"
    else:
        udfargs = ""
%>

mkdir ${LIVEDIR}
install ${runtime_img} ${LIVEDIR}/squashfs.img
treeinfo stage2 mainimage ${LIVEDIR}/squashfs.img

## install bootloader and config files
mkdir ${BOOTDIR}
install ${SYSLINUXDIR}/isolinux.bin ${BOOTDIR}
install ${SYSLINUXDIR}/vesamenu.c32 ${BOOTDIR}
install ${SYSLINUXDIR}/ldlinux.c32 ${BOOTDIR}
install ${SYSLINUXDIR}/libcom32.c32 ${BOOTDIR}
install ${SYSLINUXDIR}/libutil.c32 ${BOOTDIR}
install boot/xen.gz ${BOOTDIR}
install ${SYSLINUXDIR}/mboot.c32 ${BOOTDIR}
install ${configdir}/isolinux.cfg ${BOOTDIR}
install ${configdir}/boot.msg ${BOOTDIR}
install ${configdir}/grub.conf ${BOOTDIR}
install usr/share/anaconda/boot/syslinux-splash.png ${BOOTDIR}/splash.png
install boot/memtest* ${BOOTDIR}/memtest

## configure bootloader
replace @VERSION@ ${product.version} ${BOOTDIR}/grub.conf ${BOOTDIR}/isolinux.cfg ${BOOTDIR}/*.msg
replace @PRODUCT@ '${product.name}'  ${BOOTDIR}/grub.conf ${BOOTDIR}/isolinux.cfg ${BOOTDIR}/*.msg
replace @ROOT@ 'root=live:CDLABEL=${isolabel|udev}' ${BOOTDIR}/isolinux.cfg

## install kernels
mkdir ${KERNELDIR}
%for kernel in kernels:
    %if kernel.flavor:
        installkernel images-xen ${kernel.path} ${KERNELDIR}/vmlinuz-${kernel.flavor}
        installinitrd images-xen ${kernel.initrd.path} ${KERNELDIR}/initrd-${kernel.flavor}.img
    %else:
        installkernel images-${basearch} ${kernel.path} ${KERNELDIR}/vmlinuz
        installinitrd images-${basearch} ${kernel.initrd.path} ${KERNELDIR}/initrd.img
    %endif
%endfor

hardlink ${KERNELDIR}/vmlinuz ${BOOTDIR}
hardlink ${KERNELDIR}/initrd.img ${BOOTDIR}
%if basearch == 'x86_64':
    treeinfo images-xen kernel ${KERNELDIR}/vmlinuz
    treeinfo images-xen initrd ${KERNELDIR}/initrd.img
%endif

## WHeeeeeeee, EFI.
<% efiargs=""; efigraft=""; efihybrid=""; efiarch32=None; efiarch64=None %>
%if exists("boot/efi/EFI/*/gcdia32.efi"):
    <% efiarch32 = 'IA32' %>
%endif
%if exists("boot/efi/EFI/*/gcdx64.efi"):
    <% efiarch64 = 'X64' %>
%endif
%if (efiarch32 or efiarch64) and basearch != 'i386':
    <%
    efigraft="EFI/BOOT={0}/EFI/BOOT".format(outroot)
    images = ["images/efiboot.img"]
    if domacboot:
        images.append("images/macboot.img")
    %>
    %for img in images:
        <%
        efiargs += " -eltorito-alt-boot -e {0} -no-emul-boot".format(img)
        efigraft += " {0}={1}/{0}".format(img,outroot)
        %>
        treeinfo images-${basearch} ${img|basename} ${img}
    %endfor
    <% efihybrid = "--uefi --mac" if domacboot else "--uefi" %>
    <%include file="efi.tmpl" args="configdir=configdir, KERNELDIR=KERNELDIR, efiarch32=efiarch32, efiarch64=efiarch64, isolabel=isolabel"/>
%endif

# Create optional product.img and updates.img
<% filegraft=""; images=["product", "updates"]; compressargs=""; %>
%if basearch == 'i386':
    # Limit the amount of memory xz uses on i386
    <% compressargs="--xz -9 --memlimit-compress=3700MiB" %>
%endif
%for img in images:
    %if exists("%s/%s/" % (LORAXDIR, img)):
        installimg ${compressargs} ${LORAXDIR}/${img}/ images/${img}.img
        treeinfo images-${basearch} ${img}.img images/${img}.img
        <% filegraft += " images/{0}.img={1}/images/{0}.img".format(img, outroot) %>
    %endif
%endfor

# Add the license files
%for f in glob("/usr/share/licenses/*-release/*"):
    install ${f} ${f|basename}
    <% filegraft += " {0}={1}/{0}".format(basename(f), outroot) %>
%endfor

mkdir EFI/BOOT/x86_64-efi
install usr/lib/grub/x86_64-efi/* EFI/BOOT/x86_64-efi

## make boot.iso
runcmd mkisofs -o ${outroot}/images/boot.iso \
       -b ${BOOTDIR}/isolinux.bin -c ${BOOTDIR}/boot.cat \
       -boot-load-size 4 -boot-info-table -no-emul-boot \
       ${efiargs} -R -J -V '${isolabel}' -T ${udfargs} \
       -graft-points \
       ${BOOTDIR}=${outroot}/${BOOTDIR} \
       ${KERNELDIR}=${outroot}/${KERNELDIR} \
       ${LIVEDIR}=${outroot}/${LIVEDIR} \
       ${efigraft} ${filegraft}
runcmd isohybrid ${efihybrid} ${outroot}/images/boot.iso
treeinfo images-${basearch} boot.iso images/boot.iso
__EOF__

cat >/var/lib/mock/fedora-${RELEASE}-x86_64/root/home/build/share/lorax/templates.d/99-generic/live/config_files/x86/isolinux.cfg <<__EOF__
default vesamenu.c32
timeout 600

display boot.msg

# Clear the screen when exiting the menu, instead of leaving the menu displayed.
# For vesamenu, this means the graphical background is still displayed without
# the menu itself for as long as the screen remains in graphics mode.
menu clear
menu background splash.png
menu title @PRODUCT@ @VERSION@
menu vshift 8
menu rows 18
menu margin 8
#menu hidden
menu helpmsgrow 15
menu tabmsgrow 13

# Border Area
menu color border * #00000000 #00000000 none

# Selected item
menu color sel 0 #ffffffff #00000000 none

# Title bar
menu color title 0 #ff7ba3d0 #00000000 none

# Press [Tab] message
menu color tabmsg 0 #ff3a6496 #00000000 none

# Unselected menu item
menu color unsel 0 #84b8ffff #00000000 none

# Selected hotkey
menu color hotsel 0 #84b8ffff #00000000 none

# Unselected hotkey
menu color hotkey 0 #ffffffff #00000000 none

# Help text
menu color help 0 #ffffffff #00000000 none

# A scrollbar of some type? Not sure.
menu color scrollbar 0 #ffffffff #ff355594 none

# Timeout msg
menu color timeout 0 #ffffffff #00000000 none
menu color timeout_msg 0 #ffffffff #00000000 none

# Command prompt text
menu color cmdmark 0 #84b8ffff #00000000 none
menu color cmdline 0 #ffffffff #00000000 none

# Do not display the actual menu unless the user presses a key. All that is displayed is a timeout message.

menu tabmsg Press Tab for full configuration options on menu items.

menu separator # insert an empty line
menu separator # insert an empty line

label xen
  menu label Start @PRODUCT@ @VERSION@ with ^Xen hypervisor
  menu default
  kernel mboot.c32
  append xen.gz dom0_mem=4096M,max:8192M dom0_max_vcpus=2 dom0_vcpus_pin=true loglvl=all guest_loglvl=all iommu=on,verbose msi=1 conring_size=4M com1=115200,8n1 console=com1,vga --- vmlinuz initrd=initrd.img @ROOT@ rd.live.image xencons=hvc console=hvc0 console=tty0 --- initrd.img

label linux
  menu label ^Start @PRODUCT@ @VERSION@
  kernel vmlinuz
  append initrd=initrd.img @ROOT@ rd.live.image

label checkxen
  menu label Test this media & start @PRODUCT@ @VERSION@ with Xen hypervisor
  kernel mboot.c32
  append xen.gz dom0_mem=4096M,max:8192M dom0_max_vcpus=2 dom0_vcpus_pin=true loglvl=all guest_loglvl=all iommu=on,verbose msi=1 conring_size=4M com1=115200,8n1 console=com1,vga --- vmlinuz initrd=initrd.img @ROOT@ rd.live.image xencons=hvc console=hvc0 console=tty0 rd.live.check --- initrd.img

label check
  menu label Test this ^media & start @PRODUCT@ @VERSION@
  kernel vmlinuz
  append initrd=initrd.img @ROOT@ rd.live.image rd.live.check

menu separator # insert an empty line

# utilities submenu
menu begin ^Troubleshooting
  menu title Troubleshooting

label vesa
  menu indent count 5
  menu label Start @PRODUCT@ @VERSION@ in ^basic graphics mode
  text help
	Try this option out if you're having trouble starting
	@PRODUCT@ @VERSION@.
  endtext
  kernel vmlinuz
  append initrd=initrd.img @ROOT@ rd.live.image nomodeset

label memtest
  menu label Run a ^memory test
  text help
	If your system is having issues, a problem with your
	system's memory may be the cause. Use this utility to
	see if the memory is working correctly.
  endtext
  kernel memtest

menu separator # insert an empty line

label local
  menu label Boot from ^local drive
  localboot 0xffff

menu separator # insert an empty line
menu separator # insert an empty line

label returntomain
  menu label Return to ^main menu
  menu exit

menu end
__EOF__

cat >/var/lib/mock/fedora-${RELEASE}-x86_64/root/home/build/share/lorax/templates.d/99-generic/live/config_files/x86/grub2-efi.cfg <<__EOF__
set default="0"

function load_video {
  insmod efi_gop
  insmod efi_uga
  insmod video_bochs
  insmod video_cirrus
  insmod all_video
}

load_video
set gfxpayload=keep
insmod gzio
insmod part_gpt
insmod ext2

set timeout=60
### END /etc/grub.d/00_header ###

search --no-floppy --set=root -l '@ISOLABEL@'

### BEGIN /etc/grub.d/10_linux ###
menuentry 'Start @PRODUCT@ @VERSION@ with Xen hypervisor' --class fedora --class gnu-linux --class gnu --class os --class xen {
        insmod multiboot2
        echo    'Loading Xen ...'
        multiboot2 /isolinux/xen.gz dom0_mem=4096M,max:8192M dom0_max_vcpus=2 dom0_vcpus_pin=true loglvl=all guest_loglvl=all iommu=on,verbose msi=1 conring_size=4M com1=115200,8n1 console=com1,vga
        echo    'Loading Linux ...'
        module2  @KERNELPATH@ @ROOT@ rd.live.image ignore_loglevel intel_iommu=igfx_off log_buf_len=128M console=hvc0
        echo    'Loading initial ramdisk ...'
        module2  @INITRDPATH@
}
menuentry 'Start @PRODUCT@ @VERSION@' --class fedora --class gnu-linux --class gnu --class os {
	linuxefi @KERNELPATH@ @ROOT@ rd.live.image
	initrdefi @INITRDPATH@
}
menuentry 'Test this media & start @PRODUCT@ @VERSION@ with Xen hypervisor' --class fedora --class gnu-linux --class gnu --class os --class xen {
        insmod multiboot2
        echo    'Loading Xen ...'
        multiboot2 /isolinux/xen.gz dom0_mem=4096M,max:8192M dom0_max_vcpus=2 dom0_vcpus_pin=true loglvl=all guest_loglvl=all iommu=on,verbose msi=1 conring_size=4M com1=115200,8n1 console=com1,vga
        echo    'Loading Linux ...'
        module2  @KERNELPATH@ @ROOT@ rd.live.image ignore_loglevel intel_iommu=igfx_off log_buf_len=128M console=hvc0 rd.live.check
        echo    'Loading initial ramdisk ...'
        module2  @INITRDPATH@
}
menuentry 'Test this media & start @PRODUCT@ @VERSION@' --class fedora --class gnu-linux --class gnu --class os {
	linuxefi @KERNELPATH@ @ROOT@ rd.live.image rd.live.check
	initrdefi @INITRDPATH@
}
submenu 'Troubleshooting -->' {
	menuentry 'Start @PRODUCT@ @VERSION@ in basic graphics mode' --class fedora --class gnu-linux --class gnu --class os {
		linuxefi @KERNELPATH@ @ROOT@ rd.live.image nomodeset
		initrdefi @INITRDPATH@
	}
}
__EOF__

}

# Create the build script.
PROJECT="Fedora-Bootstrap-Live"
BUILD="/home/build"
MOCKDIR="fedora-${RELEASE}-x86_64"
BASE="/var/lib/mock/$MOCKDIR/root"

# TODO Make generic path
# Create the bootstrap.ks file from the startup files.
./make-bootstrap-ks

# Copy the kickstart files into mock.
mv -f bootstrap.ks $BASE/$BUILD
cp -a -f fedora-live-base.ks $BASE/$BUILD
cp -a fedora-live-workstation.ks $BASE/$BUILD

# Flatten the modified workstation kickstart in mock.
mock -r $MOCKDIR --shell --old-chroot <<-EOD
	cd $BUILD
	cp /usr/share/spin-kickstarts/fedora-repo.ks .
	cp /usr/share/spin-kickstarts/fedora-repo-rawhide.ks .
	cp /usr/share/spin-kickstarts/fedora-repo-not-rawhide.ks .
	cp /usr/share/spin-kickstarts/fedora-workstation-common.ks .
	if [ -n "\$(grep "# %include fedora-repo-not-rawhide.ks" fedora-repo.ks)" ]; then
	  echo "Setting repo to not rawhide."
	  cat >fedora-repo.ks <<-DOE
		# For the master branch the following should be uncommented
		# %include fedora-repo-rawhide.ks

		# For non-master branches the following should be uncommented
		%include fedora-repo-not-rawhide.ks
		DOE
	fi
	ksflatten -c fedora-live-workstation.ks -o fedora-live-workstation-flat.ks
	EOD

# Overwrite the lorax templates with bootstrap versions.
update_lorax_files

# Do the diffs in mock.

mock -r $MOCKDIR --shell --old-chroot <<-EOD
	cd $BUILD

	echo >changes.diff

	echo "fedora-live-workstation.ks:" >>changes.diff
	diff /usr/share/spin-kickstarts/fedora-live-workstation.ks fedora-live-workstation.ks >>changes.diff || true
	echo >>changes.diff

	echo "fedora-live-base.ks:" >>changes.diff
	diff /usr/share/spin-kickstarts/fedora-live-base.ks fedora-live-base.ks >>changes.diff || true
	echo >>changes.diff

	echo "x86.tmpl:" >>changes.diff
	diff /usr/share/lorax/templates.d/99-generic/live/x86.tmpl share/lorax/templates.d/99-generic/live/x86.tmpl >>changes.diff || :
	echo >>changes.diff

	echo "isolinux.cfg:" >>changes.diff
	diff /usr/share/lorax/templates.d/99-generic/live/config_files/x86/isolinux.cfg share/lorax/templates.d/99-generic/live/config_files/x86/isolinux.cfg >>changes.diff || :
	echo >>changes.diff

	echo "grub2-efi.cfg:" >>changes.diff
	diff /usr/share/lorax/templates.d/99-generic/live/config_files/x86/grub2-efi.cfg share/lorax/templates.d/99-generic/live/config_files/x86/grub2-efi.cfg >>changes.diff || :
	echo >>changes.diff

	# Clean your room.
	rm -f bootstrap.ks
	rm -f fedora-live-base.ks
	rm -f fedora-live-workstation.ks
	rm -f fedora-repo.ks
	rm -f fedora-repo-not-rawhide.ks
	rm -f fedora-workstation-common.ks
	chown 1000:1000 changes.diff
	EOD

mv $BASE/$BUILD/changes.diff xen-bootstrap-iso-fedora.diff

#--title TITLE            Substituted for @TITLE@ in bootloader config files
#--project PROJECT        substituted for @PROJECT@ in bootloader config files
#--releasever RELEASEVER  substituted for @VERSION@ in bootloader config files

# Script to be executed by mock.
cat >$BASE/$BUILD/build-iso <<-__EOF__
	#!/bin/sh

	cd $BUILD

	rm -rf tmp
	rm -rf lmc
	rm -rf image
	rm -rf logs
	mkdir -p tmp
	mkdir -p logs/image
	mkdir -p logs/iso

	# Create the live file system image.
	livemedia-creator --ks fedora-live-workstation-flat.ks \
	  --no-virt \
	  --lorax-templates=./share/lorax/templates.d/99-generic/ \
	  --logfile=./logs/image/image.log \
	  --resultdir=./image \
	  --make-fsimage \
	  --image-name=livexen.img \
	  --fs-label=LiveXen \
	  --tmp=./tmp || exit 1

	# Make updates to image.

	rm -rf mnt
	mkdir mnt
	mount ./image/livexen.img ./mnt
	cat >>./mnt/etc/sysconfig/xencommons <<-EOD
	
	# Enable xenstore domain.
	XENSTORETYPE=domain
	XENSTORE_MAX_DOMAIN_SIZE=8:1/128
	EOD
	
	# Reset default target to multi-user.  Use 'systemctl isolate graphical.target' to enable gui.
	rm -f ./mnt/etc/systemd/system/default.target
	ln -s /lib/systemd/system/multi-user.target ./mnt/etc/systemd/system/default.target

	umount ./mnt
	sleep 1s
	rmdir ./mnt

	# Create the live iso from the "enhanced" file system image.
	livemedia-creator --ks fedora-live-workstation-flat.ks \
	  --no-virt \
	  --lorax-templates=./share/lorax/templates.d/99-generic/ \
	  --resultdir=./lmc \
	  --fs-image=./image/livexen.img \
	  --make-iso \
	  --iso-only \
	  --iso-name=${PROJECT}-x86_64-${RELEASE}.iso \
	  --volid=${PROJECT}-${RELEASE} \
	  --logfile=./logs/iso/iso.log \
	  --project=${PROJECT} \
	  --releasever=${RELEASE} \
	  --title=${PROJECT} \
	  --nomacboot \
	  --tmp=./tmp

	chown -R 1000:1000 ./lmc
	chown -R 1000:1000 ./logs

	rm -rf tmp

	__EOF__

# Make the build script executable.
chmod +x $BASE/$BUILD/build-iso

if [ "$1" != "diff" ]; then

  # Run it in mock environment.
  time mock -r $MOCKDIR --shell --old-chroot \
    $BUILD/build-iso

  # Get the iso image from the mock environment.
  mv -f $BASE/$BUILD/lmc/*.iso .

  # Move the log files.
  rm -rf logs
  mv $BASE/$BUILD/logs .

fi

echo "Done!"

